// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOVEINPUT_H_
#define FLATBUFFERS_GENERATED_MOVEINPUT_H_

#include "flatbuffers/flatbuffers.h"

struct MoveInput;
struct MoveInputBuilder;

struct MoveInput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UP = 4,
    VT_DOWN = 6,
    VT_LEFT = 8,
    VT_RIGHT = 10
  };
  bool up() const {
    return GetField<uint8_t>(VT_UP, 0) != 0;
  }
  bool down() const {
    return GetField<uint8_t>(VT_DOWN, 0) != 0;
  }
  bool left() const {
    return GetField<uint8_t>(VT_LEFT, 0) != 0;
  }
  bool right() const {
    return GetField<uint8_t>(VT_RIGHT, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_UP) &&
           VerifyField<uint8_t>(verifier, VT_DOWN) &&
           VerifyField<uint8_t>(verifier, VT_LEFT) &&
           VerifyField<uint8_t>(verifier, VT_RIGHT) &&
           verifier.EndTable();
  }
};

struct MoveInputBuilder {
  typedef MoveInput Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_up(bool up) {
    fbb_.AddElement<uint8_t>(MoveInput::VT_UP, static_cast<uint8_t>(up), 0);
  }
  void add_down(bool down) {
    fbb_.AddElement<uint8_t>(MoveInput::VT_DOWN, static_cast<uint8_t>(down), 0);
  }
  void add_left(bool left) {
    fbb_.AddElement<uint8_t>(MoveInput::VT_LEFT, static_cast<uint8_t>(left), 0);
  }
  void add_right(bool right) {
    fbb_.AddElement<uint8_t>(MoveInput::VT_RIGHT, static_cast<uint8_t>(right), 0);
  }
  explicit MoveInputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MoveInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveInput>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveInput> CreateMoveInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool up = false,
    bool down = false,
    bool left = false,
    bool right = false) {
  MoveInputBuilder builder_(_fbb);
  builder_.add_right(right);
  builder_.add_left(left);
  builder_.add_down(down);
  builder_.add_up(up);
  return builder_.Finish();
}

inline const MoveInput *GetMoveInput(const void *buf) {
  return flatbuffers::GetRoot<MoveInput>(buf);
}

inline const MoveInput *GetSizePrefixedMoveInput(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MoveInput>(buf);
}

inline bool VerifyMoveInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MoveInput>(nullptr);
}

inline bool VerifySizePrefixedMoveInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MoveInput>(nullptr);
}

inline void FinishMoveInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MoveInput> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMoveInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MoveInput> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MOVEINPUT_H_
